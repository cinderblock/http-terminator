name: Main

on: [push, pull_request]

jobs:
  check-format:
    name: Check - Format

    runs-on: ubuntu-latest

    steps:
      - name: Checkout latest code
        uses: actions/checkout@v1

      - name: Configure Npm
        run: |
          echo "color = always" >> .npmrc

      - name: Build
        run: npm install --ignore-scripts

      - name: Prettier
        run: npm run format-check -- --color

  check-lint:
    name: Check - Lint

    runs-on: ubuntu-latest

    steps:
      - name: Checkout latest code
        uses: actions/checkout@v1

      - name: Configure Npm
        run: |
          echo "color = always" >> .npmrc

      - name: Build
        run: npm install --ignore-scripts

      - name: ESLint
        run: npm run lint -- --color

  check-spelling:
    name: Check - Spelling

    runs-on: ubuntu-latest

    steps:
      - name: Checkout latest code
        uses: actions/checkout@v1

      - name: Configure Npm
        run: |
          echo "color = always" >> .npmrc

      - name: Build
        run: npm install --ignore-scripts

      - name: cSpell
        run: npm run spell -- --color

  install-and-run-from-git:
    name: Test from Github

    runs-on: ubuntu-latest

    steps:
      - name: Checkout latest code
        uses: actions/checkout@v1

      - name: Install Node dependencies without building locally
        run: npm install --ignore-scripts

      - name: 'Debug: List post build files'
        run: find * \( -path node_modules -o -path .git \) -print -prune -o -type f -print | tee /tmp/build.list

      # Prepare Test Environment

      - name: Create Dummy Package.json
        run: echo \{\} > test/package.json

      - name: Install Current Version as Git Dependency
        working-directory: test
        run: npm install ${{ github.repository }}#${{ github.sha }}

      - name: 'Debug: List Dependency Folder Contents'
        working-directory: test
        run: find node_modules/@cinderblock/http-terminator -type f -print

      # Ensure the code works

      - name: Run Tests with Prepared Git Dependency
        run: npm test -- --no-coverage --color
        timeout-minutes: 10

  coverage:
    name: Test with Coverage

    runs-on: ubuntu-latest

    steps:
      - name: Checkout latest code
        uses: actions/checkout@v1

      - name: 'Debug: Node version'
        run: node --version

      - name: Build
        run: npm install

      - name: 'Debug: List post build files'
        run: find * \( -path node_modules -o -path .git \) -print -prune -o -type f -print | tee /tmp/build.list

      - name: Checkout Working Directory
        uses: cinderblock/github-action-working-directory@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          branch: allure-results/${{ github.ref }}
          working-directory: allure-results

      - name: Test with Coverage
        run: npm test -- --color --detectOpenHandles
        timeout-minutes: 10

      - name: 'Debug: List post Coverage files'
        if: always()
        run: find * \( -path node_modules -o -path .git \) -print -prune -o -type f -print | tee /tmp/coverage.list

      - name: 'Debug: Coverage diff'
        if: always()
        run: 'diff -U 0 /tmp/build.list /tmp/coverage.list || :'

      - name: 'Debug: List post Coverage files'
        if: always()
        run: find * \( -path node_modules -o -path .git \) -print -prune -o -type f -print | tee /tmp/gcov.list

      - name: Generate Allure Report
        if: always()
        run: npm run allure

      - name: Prevent gh-pages Jekyll
        if: always()
        run: touch public/.nojekyll

      - name: Copy historical report to results
        if: always()
        run: cp --recursive --force public/allure-report/history allure-results/

      - name: 'Debug: Print coverage report'
        if: always()
        run: lcov --list coverage/lcov.info

      # Publish to gh-pages
      - name: Publish to gh-pages
        if: always()
        uses: peaceiris/actions-gh-pages@v2
        env:
          ACTIONS_DEPLOY_KEY: ${{ secrets.ACTIONS_DEPLOY_KEY }}
          PUBLISH_BRANCH: gh-pages
          PUBLISH_DIR: public
        with:
          emptyCommits: false
          username: 'GitHub Action Static Build'
          #useremail: "actions@github.com"

  publish-master:
    name: Publish - Master
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    needs:
      [
        check-format,
        check-lint,
        check-spelling,
        coverage,
        install-and-run-from-git,
      ]
    steps:
      - name: Checkout latest code
        uses: actions/checkout@v1

      - name: Install Deps and build
        run: npm install --color

      - name: Create .npmrc with Auth Token
        run: echo '//registry.npmjs.org/:_authToken=${NPM_TOKEN}' > .npmrc

      - name: Publish to npm latest - Error means no change
        run: npm publish --access public --color --ignore-scripts
        continue-on-error: true # npm publish exits with error iff package version already published.
        env:
          NPM_TOKEN: ${{ secrets.npm_token }}

  install-and-run-from-npm-master:
    needs: [publish-master]
    name: Test Install from Npm
    runs-on: ubuntu-latest
    steps:
      - name: Checkout latest code
        uses: actions/checkout@v1

      - name: Install Node dependencies without building locally
        run: npm install --ignore-scripts

      - name: 'Debug: List post build files'
        run: find * \( -path node_modules -o -path .git \) -print -prune -o -type f -print | tee /tmp/build.list

      # Prepare Test Environment

      - name: Create Dummy Package.json
        run: echo \{\} > test/package.json

      - name: Install Current Version as Git Dependency
        working-directory: test
        run: npm install @cinderblock/http-terminator

      - name: 'Debug: List Dependency Folder Contents'
        working-directory: test
        run: find node_modules/@cinderblock/http-terminator -type f -print

      # Ensure the code works

      - name: Run Tests with Prepared Git Dependency
        run: npm test -- --no-coverage --color
        timeout-minutes: 10

  publish-beta:
    name: Publish - Beta
    if: github.event_name == 'push' && github.ref == 'refs/heads/beta'
    runs-on: ubuntu-latest
    needs:
      # prettier-ignore
      [
        check-format,
        check-lint,
        check-spelling,
      ]
    steps:
      - name: Checkout latest code
        uses: actions/checkout@v1

      - name: Install Deps and build
        run: npm install --color

      - name: Create .npmrc with Auth Token
        run: echo '//registry.npmjs.org/:_authToken=${NPM_TOKEN}' > .npmrc

      - name: Publish to npm beta - Error means no change
        run: npm publish --access public --color --ignore-scripts --tag beta
        continue-on-error: true # npm publish exits with error iff package version already published.
        env:
          NPM_TOKEN: ${{ secrets.npm_token }}

  install-and-run-from-npm-beta:
    needs: [publish-beta]
    name: Test Install from Npm
    runs-on: ubuntu-latest
    steps:
      - name: Checkout latest code
        uses: actions/checkout@v1

      - name: Install Node dependencies without building locally
        run: npm install --ignore-scripts

      - name: 'Debug: List post build files'
        run: find * \( -path node_modules -o -path .git \) -print -prune -o -type f -print | tee /tmp/build.list

      # Prepare Test Environment

      - name: Create Dummy Package.json
        run: echo \{\} > test/package.json

      - name: Install Current Version as Git Dependency
        working-directory: test
        run: npm install @cinderblock/http-terminator@beta

      - name: 'Debug: List Dependency Folder Contents'
        working-directory: test
        run: find node_modules/@cinderblock/http-terminator -type f -print

      # Ensure the code works

      - name: Run Tests with Prepared Git Dependency
        run: npm test -- --no-coverage --color
        timeout-minutes: 10
